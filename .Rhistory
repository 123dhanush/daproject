word_present=sample(word_present)
words_absent=sample(word_absent)
set.seed(42)
test_words=sample(c(word_present[1:10],word_absent))
test_words
out=function(...){
cat(sprintf(...))
}
for(i in test_words)
{
if(bloomf$check(i))
{
if(i %in% word_absent){
out("'%s' is false positive\n", i)
}
else {
out("'%s' is probably present\n", i)
}
}
else {
out("'%s' is not present\n", i)
}
}
library(digest)
library(bit)
bloomfilter=setRefClass("bloomfilter",
fields = list(
.set_prob="numeric",
.size="integer",
.hash_count="integer",
.bitarray="ANY"
),
methods = list(
initialize=function(item_count,set_prob)
{
.set_prob<<-set_prob
.size<<-get_size(item_count,set_prob)
.hash_count<<-get_hash_count(.size,item_count)
.bitarray<<-bit(.size)
},
get_size=function(n,p)
{
m=-(n*log(p))/(log(2)^2)
return(as.integer(m))
},
get_hash_count=function(m,n)
{
k=(m/n)*log(2)
return (as.integer(k))
},
add=function(item)
{
for(i in 1:.hash_count)
{
hash_digest=get_hash(item,i)
.bitarray[hash_digest]<<-TRUE
}
},
check=function(item)
{
for(i in 1:.hash_count)
{
hash_digest=get_hash(item,i)
if(.bitarray[hash_digest]==FALSE)
{
return (FALSE)
}
}
return (TRUE)
},
get_hash=function(item,seed)
{
hex_str=digest(object = item,algo="murmur32",serialize = F,seed = seed)
hex=paste('0x',hex_str,sep="")
as.numeric(hex)%%.size
}
)
)
n=20
p=0.05
bloomf=bloomfilter$new(n,p)
word_present = c('abound','abounds','abundance','abundant','accessable',
'bloom','blossom','bolster','bonny','bonus','bonuses',
'coherent','cohesive','colorful','comely','comfort',
'gems','generosity','generous','generously','genial')
word_absent = c('bluff','cheater','hate','war','humanity',
'racism','hurt','nuke','gloomy','facebook',
'geeksforgeeks','twitter')
for(i in word_present)
{
bloomf$add(i)
}
word_present=sample(word_present)
words_absent=sample(word_absent)
set.seed(42)
test_words=sample(c(word_present[1:10],word_absent))
test_words
out=function(...){
cat(sprintf(...))
}
for(i in test_words)
{
if(bloomf$check(i))
{
if(i %in% word_absent){
out("'%s' is false positive\n", i)
}
else {
out("'%s' is probably present\n", i)
}
}
else {
out("'%s' is not present\n", i)
}
}
library(digest) # https://cran.r-project.org/web/packages/digest/digest.pdf
library(bit)    # https://cran.r-project.org/web/packages/bit/bit.pdf
# https://llimllib.github.io/bloomfilter-tutorial/
# https://github.com/rstudio/shiny-examples/blob/master/087-crandash/bloomfilter.R
# https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/
# Translation of above python script
BloomFilter <- setRefClass("BloomFilter",
fields = list(
.fp_prob = "numeric",
.size = "integer",
.hash_count = "integer",
.bit_array = "ANY"
),
methods = list(
initialize = function(items_count, fp_prob) {
.fp_prob    <<- fp_prob
.size       <<- get_size(items_count, fp_prob)
.hash_count <<- get_hash_count(.size, items_count)
.bit_array  <<- bit(.size)
},
get_size = function(n, p) {
m = -(n * log(p)) / (log(2)^2)
return (as.integer(m))
},
get_hash_count = function(m, n) {
k = (m/n) * log(2)
return (as.integer(k))
},
add = function(item) {
for (i in 1:.hash_count) {
hash_digest = get_hash(item, i)
.bit_array[hash_digest] <<- TRUE
}
},
check = function(item) {
for (i in 1:.hash_count) {
hash_digest = get_hash(item, i)
if (.bit_array[hash_digest] == FALSE) {
return (FALSE)
}
}
return (TRUE)
},
get_hash = function(item, seed) {
hex_str = digest(object = item,
algo = "murmur32",
serialize = F,
seed = seed)
hex = paste('0x', hex_str, sep = "")
# strtoi overflows with integers larger than 2^31 (NA)
as.numeric(hex) %% .size
}
)
)
n = 20
p = 0.05
bloomf = BloomFilter$new(n, p)
sprintf("Size of bit array:%s", bloomf$.size)
sprintf("False positive Probability:%s", bloomf$.fp_prob)
sprintf("Number of hash functions:%s", bloomf$.hash_count)
word_present = c('abound','abounds','abundance','abundant','accessable',
'bloom','blossom','bolster','bonny','bonus','bonuses',
'coherent','cohesive','colorful','comely','comfort',
'gems','generosity','generous','generously','genial')
word_absent = c('bluff','cheater','hate','war','humanity',
'racism','hurt','nuke','gloomy','facebook',
'geeksforgeeks','twitter')
for (item in word_present) {
bloomf$add(item)
}
set.seed(42)
word_present = sample(word_present)
word_absent  = sample(word_absent)
word_present
word_absent
test_words = sample( c(word_present[1:10], word_absent) )
test_words
# sprintf doesn't print in non-interactive mode
output <- function(...) { cat(sprintf(...)) }
for ( word in test_words ) {
if ( bloomf$check(word) ) {
if (word %in% word_absent) {
output("'%s' is a false positive!\n", word)
}
else {
output("'%s' is probably present!\n", word)
}
}
else {
output("'%s' is definitely not present!\n", word)
}
}
library(digest) # https://cran.r-project.org/web/packages/digest/digest.pdf
library(bit)    # https://cran.r-project.org/web/packages/bit/bit.pdf
# https://llimllib.github.io/bloomfilter-tutorial/
# https://github.com/rstudio/shiny-examples/blob/master/087-crandash/bloomfilter.R
# https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/
# Translation of above python script
BloomFilter <- setRefClass("BloomFilter",
fields = list(
.fp_prob = "numeric",
.size = "integer",
.hash_count = "integer",
.bit_array = "ANY"
),
methods = list(
initialize = function(items_count, fp_prob) {
.fp_prob    <<- fp_prob
.size       <<- get_size(items_count, fp_prob)
.hash_count <<- get_hash_count(.size, items_count)
.bit_array  <<- bit(.size)
},
get_size = function(n, p) {
m = -(n * log(p)) / (log(2)^2)
return (as.integer(m))
},
get_hash_count = function(m, n) {
k = (m/n) * log(2)
return (as.integer(k))
},
add = function(item) {
for (i in 1:.hash_count) {
hash_digest = get_hash(item, i)
.bit_array[hash_digest] <<- TRUE
}
},
check = function(item) {
for (i in 1:.hash_count) {
hash_digest = get_hash(item, i)
if (.bit_array[hash_digest] == FALSE) {
return (FALSE)
}
}
return (TRUE)
},
get_hash = function(item, seed) {
hex_str = digest(object = item,
algo = "murmur32",
serialize = F,
seed = seed)
hex = paste('0x', hex_str, sep = "")
# strtoi overflows with integers larger than 2^31 (NA)
return (as.numeric(hex) %% .size)
}
)
)
n = 20
p = 0.05
bloomf = BloomFilter$new(n, p)
sprintf("Size of bit array:%s", bloomf$.size)
sprintf("False positive Probability:%s", bloomf$.fp_prob)
sprintf("Number of hash functions:%s", bloomf$.hash_count)
word_present = c('abound','abounds','abundance','abundant','accessable',
'bloom','blossom','bolster','bonny','bonus','bonuses',
'coherent','cohesive','colorful','comely','comfort',
'gems','generosity','generous','generously','genial')
word_absent = c('bluff','cheater','hate','war','humanity',
'racism','hurt','nuke','gloomy','facebook',
'geeksforgeeks','twitter')
for (item in word_present) {
bloomf$add(item)
}
set.seed(42)
word_present = sample(word_present)
word_absent  = sample(word_absent)
word_present
word_absent
test_words = sample( c(word_present[1:10], word_absent) )
test_words
# sprintf doesn't print in non-interactive mode
output <- function(...) { cat(sprintf(...)) }
for ( word in test_words ) {
if ( bloomf$check(word) ) {
if (word %in% word_absent) {
output("'%s' is a false positive!\n", word)
}
else {
output("'%s' is probably present!\n", word)
}
}
else {
output("'%s' is definitely not present!\n", word)
}
}
library(Biostrings)
x=c(1,3,2,1,2,3,4,3,1,2,3,1)
h=function(var)
{
return ((6*var+1)%%5)
}
r=c()
b=function(var1)
{
l1=rev(intToBits(var1))
l1=paste(as.integer(l1),collapse = "")
return(l1)
}
lz=c()
leadzero=function(var2)
{ var2=strsplit(var2,"")
#print(length(var2))
var2=rev(var2)
# print(var2)
for( i in length(var2[[1]]):1)
{
if (var2[[1]][i]!="0")
{ print(var2[[1]][i])
return (32-i)
}
}
return (0)
}
hf=c()
for(i in 1:length(x))
{
temp=h(x[i])
hf[i]=temp
}
hf
for( i in 1:length(hf))
{
temp=b(hf[i])
r[i]=temp
}
r
for( i in 1:length(r))
{
#print(r[i])
temp=leadzero(r[i])
#print(temp)
lz[i]=temp
}
lz
max(lz)
print(2^max(lz))
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df1$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
df1=read.csv("notesapp_studentstats.csv",header = FALSE,sep=",")
colnames(df1)=c("id","username","filename","count","courseid")
df1
df2=read.csv("notesapp_filedb.csv",header = FALSE,sep=",")
colnames(df2)=c("fileid","filename","fileurl","filecount","courseid","filecontent")
df2
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df1$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
barplot(as.numeric(df2$filecount),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df2$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "count",
ylab = "files",
names.arg = df1$username,
col = "darkred",
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
library(dplyr)
byusername=group_by(df1,username)
#summarize(data,userfilecount=sum(count))
# user activity
summarize(byusername,userfilecount=sum(count))
summarize(byusername,userfilecount=sum(count))[[2]]
plot(summarize(byusername,userfilecount=sum(count))[[1]],summarize(byusername,userfilecount=sum(count))[[2]],main="username vs filecount",type="p",col=rainbow(5),xlab="username",ylab="filecount")
bycourse =group_by(df2,courseid)
summarize(bycourse,userfilecount=sum(filecount))
summarize(bycourse,userfilecount=sum(filecount))[[2]]
plot(summarize(bycourse,userfilecount=sum(filecount))[[1]],summarize(bycourse,userfilecount=sum(filecount))[[2]],main="couseid vs filecount",type="p",col=rainbow(5),xlab="course",ylab="filecount")
df1=read.csv("notesapp_studentstats.csv",header = FALSE,sep=",")
colnames(df1)=c("id","username","filename","count","courseid")
df1
df2=read.csv("notesapp_filedb.csv",header = FALSE,sep=",")
colnames(df2)=c("fileid","filename","fileurl","filecount","courseid","filecontent")
df2
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df1$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
barplot(as.numeric(df2$filecount),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df2$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "count",
ylab = "files",
names.arg = df1$username,
col = "darkred",
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
library(dplyr)
byusername=group_by(df1,username)
#summarize(data,userfilecount=sum(count))
# user activity
summarize(byusername,userfilecount=sum(count))
summarize(byusername,userfilecount=sum(count))[[2]]
plot(summarize(byusername,userfilecount=sum(count))[[1]],summarize(byusername,userfilecount=sum(count))[[2]],main="username vs filecount",type="p",col=rainbow(5),xlab="username",ylab="filecount")
bycourse =group_by(df2,courseid)
summarize(bycourse,userfilecount=sum(filecount))
summarize(bycourse,userfilecount=sum(filecount))[[2]]
plot(summarize(bycourse,userfilecount=sum(filecount))[[1]],summarize(bycourse,userfilecount=sum(filecount))[[2]],main="couseid vs filecount",type="p",col=rainbow(5),xlab="course",ylab="filecount")
setwd("~/projectfiles")
df1=read.csv("notesapp_studentstats.csv",header = FALSE,sep=",")
colnames(df1)=c("id","username","filename","count","courseid")
df1
df2=read.csv("notesapp_filedb.csv",header = FALSE,sep=",")
colnames(df2)=c("fileid","filename","fileurl","filecount","courseid","filecontent")
df2
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df1$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
barplot(as.numeric(df2$filecount),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df2$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "count",
ylab = "files",
names.arg = df1$username,
col = "darkred",
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
library(dplyr)
byusername=group_by(df1,username)
#summarize(data,userfilecount=sum(count))
# user activity
summarize(byusername,userfilecount=sum(count))
summarize(byusername,userfilecount=sum(count))[[2]]
plot(summarize(byusername,userfilecount=sum(count))[[1]],summarize(byusername,userfilecount=sum(count))[[2]],main="username vs filecount",type="p",col=rainbow(5),xlab="username",ylab="filecount")
bycourse =group_by(df2,courseid)
summarize(bycourse,userfilecount=sum(filecount))
summarize(bycourse,userfilecount=sum(filecount))[[2]]
plot(summarize(bycourse,userfilecount=sum(filecount))[[1]],summarize(bycourse,userfilecount=sum(filecount))[[2]],main="couseid vs filecount",type="p",col=rainbow(5),xlab="course",ylab="filecount")
barplot(as.numeric(df1$count),
main = "count vs files",
xlab = "files",
ylab = "count",
names.arg = df1$filename,
col = rainbow(5),
horiz = FALSE,
las=2,
cex.names = 0.5,
cex.axis = 0.5)
